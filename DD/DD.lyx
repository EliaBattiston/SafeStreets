#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\date{}
\usepackage{multicol}
\usepackage{array}
\usepackage{chngcntr}
\counterwithin*{section}{part}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_author "Elia Battiston"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation 0mm
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 0 15 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\paragraph_spacing double
\align right
\begin_inset Graphics
	filename Images/PoliMi.svg
	lyxscale 20
	width 30text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
let
\backslash
newpage
\backslash
relax
\end_layout

\end_inset


\end_layout

\begin_layout Title
\begin_inset Graphics
	filename Images/SafeStreetsLogo.svg
	lyxscale 20
	width 20text%

\end_inset


\begin_inset Newline newline
\end_inset

SafeStreets - DD
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
small Politecnico di Milano - A.Y.
 2019/20120}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Andrea Aspesi - 
\begin_inset CommandInset href
LatexCommand href
name "andrea.aspesi@mail.polimi.it"
target "andrea.aspesi@mail.polimi.it"
type "mailto:"
literal "false"

\end_inset


\begin_inset Newline newline
\end_inset

Elia Battiston - 
\begin_inset CommandInset href
LatexCommand href
name "elia.battiston@mail.polimi.it"
target "elia.battiston@mail.polimi.it"
type "mailto:"
literal "false"

\end_inset


\begin_inset Newline newline
\end_inset

Alessandro Carabelli - 
\begin_inset CommandInset href
LatexCommand href
name "alessandro2.carabelli@mail.polimi.it"
target "alessandro2.carabelli@mail.polimi.it"
type "mailto:"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Section
Purpose
\end_layout

\begin_layout Section
Scope
\end_layout

\begin_layout Section
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Section
Revision history
\end_layout

\begin_layout Section
Reference documents
\end_layout

\begin_layout Itemize
Specification document: 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "SafeStreets Mandatory Project Assignment"
target "https://beep.metid.polimi.it/documents/121843524/6b7a0cd3-49cd-4898-95ca-090e5eeac5df"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Document structure
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Architectural design
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Section
Component view
\end_layout

\begin_layout Section
Deployment view
\end_layout

\begin_layout Standard
SafeStreets architecture is based on a three-tier architecture:
\end_layout

\begin_layout Itemize

\series bold
Presentation Tier
\series default
: it is composed by the mobile application and the web application.
 It is the Tier that directly interacts with the user
\end_layout

\begin_deeper
\begin_layout Itemize
Mobile App: used by any user to access all the reporting fetures;
\end_layout

\begin_layout Itemize
Web App: used by Administrators (they can manage the accounts) and municipality
 Officiers (sees reports by users and statistical data).
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Business Logic Tier: 
\series default
it handles the business logic.
 It is composed by the Apache web server and the PHP engine.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Handles all the RESTful API requests coming from the presentation tier;
\end_layout

\begin_layout Itemize
Provides the Web Application hosting;
\end_layout

\begin_layout Itemize
Runs the 
\emph on
Municipality APIs adapter
\emph default
 that handles dedicated municipality features;
\end_layout

\begin_layout Itemize
Runs in batch the 
\emph on
Safety&Suggestions engine
\emph default
 for data mining.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Data Tier: 
\series default
the DataBase server is the data container.
 On a dedicated virtual machine, it runs:
\end_layout

\begin_deeper
\begin_layout Itemize
A RDBMS, used for all the data apart from pictures;
\end_layout

\begin_layout Itemize
An FTP server to manage the Pictures uploaded by the users.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Images/Deployment View.svg
	lyxscale 45
	scale 65

\end_inset


\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Itemize

\series bold
Presentation Tier:
\end_layout

\begin_deeper
\begin_layout Itemize
Mobile App: the mobile application will be impemented using the cross platform
 framework 
\emph on
'Xamarin Forms
\emph default
'.
 With a shared C# codebase it's possible to compile both Android and iOS
 native applications.
 
\begin_inset Newline newline
\end_inset

It is a faster solution than making two different applications and it gives
 both the OS the same expirience;
\end_layout

\begin_layout Itemize
Web App: the web application is going to be written in HTML, CSS, JS & jQuery.
 Through an Ajax approach it will gets data from the API server.
 
\begin_inset Newline newline
\end_inset

It will be served throug a secured TLS connection (HTTPS) to ensure privacy.
\begin_inset Newline newline
\end_inset

A Web Approach has been choosen to provide an always-available and any-platform
 service.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Business Logic Tier:
\series default
 running on a virtualized Linux x64 machine, we'll have instances of:
\end_layout

\begin_deeper
\begin_layout Itemize
Apache web server: provides capabilities to handle http requests over the
 network;
\end_layout

\begin_layout Itemize
PHP runtime: 
\end_layout

\begin_deeper
\begin_layout Itemize
runs the APIs php scripts, both all-users-APIs and municipality-APIs;
\end_layout

\begin_layout Itemize
runs the Web Application dynamic pages;
\end_layout

\end_deeper
\begin_layout Itemize
Python: runs the 
\emph on
Safety&Suggestions engine
\emph default
,
\begin_inset Newline newline
\end_inset

It has been choosen for its libraries on data mining and geocoding.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Data Tier:
\series default
 running on a virtualized Linux x64 machine, we'll have instances of:
\end_layout

\begin_deeper
\begin_layout Itemize
MariaDB: Relational DBMS used for non graphical data, such as users data,
 reports data and location ones.
\begin_inset Newline newline
\end_inset

The adoption of a Relational Database has been taken to be able to query
 statistical data to run the 
\emph on
Safety&Suggestions engine
\emph default
 faster;
\end_layout

\begin_layout Itemize
FTP server: used as storage for all the users pictures.
\begin_inset Newline newline
\end_inset

The adoption of a different storage practice for pictures has been made
 because Pictures are BLOBs that have no advantages in being collected in
 a DB and that can slow it down.
\end_layout

\end_deeper
\begin_layout Subsection
Infrastructure
\end_layout

\begin_layout Standard
Our virtualized Linux x64 Machines will be deployed on AWS on EC2 instances.
 
\end_layout

\begin_layout Standard
Mainteinance costs calculated through the 
\begin_inset CommandInset href
LatexCommand href
name "awstcocalculator.com"
target "https://awstcocalculator.com/"
literal "false"

\end_inset

 show up a possible total save of 80% of costs thanks to the use of the
 AWS platform.
\end_layout

\begin_layout Standard
Apart from lower costs, AWS provides elasticity, a SLA of 99.99% and a greater
 security than other solutions.
\end_layout

\begin_layout Standard
Estimations of load and performance made us choose:
\end_layout

\begin_layout Itemize
8 v-cpu 32GB ram and 512GB SSD linux machine for the BL Tier;
\end_layout

\begin_layout Itemize
8 v-cpu 64GB ram and 2TB SSD (with daily backups) linux machine for the
 Data Tier.
\end_layout

\begin_layout Standard
Thanks to elasticity it will be possible to adapt the servers to the real
 needs after the release.
\end_layout

\begin_layout Section
Component interfacesand a
\end_layout

\begin_layout Section
Selected architectural styles and patterns
\end_layout

\begin_layout Standard
The adoption of a well know architectural style such as RESTful and three
 tier (architecture) can be seen throughout all the SDLC (software development
 lifecycle).
\end_layout

\begin_layout Standard
Each of them has been choosen between different options for their advantages
 in an Agile project management.
\end_layout

\begin_layout Paragraph
RESTful architecture
\end_layout

\begin_layout Standard
RESTful APIs has been choosen to grant a flexible, but still completely
 defined, endpoint for all the client-server interactions.
 The application is going to be built in parallel with the APIs, having
 a predefined, shared and complete definition of them can grant an easier
 workload for both the components.
\end_layout

\begin_layout Standard
The use of RESTful APIs provides also an easy-to-read implementation of
 the comunications.
 The answers for all the APIs come in form of JSON data structures.
\end_layout

\begin_layout Standard
Another advantage is the possibility of sharing client-server comunication
 standard between the Mobile App and the Web App.
 Third-parties can also get easily access, under predefined constraints,
 to our APIs and connect them with their systems.
\end_layout

\begin_layout Standard
To provide external unwanted behaviours from possible hackers, the APIs
 are going to be served throug CORS policies only to our Web App.
\end_layout

\begin_layout Standard
Other great RESTful advantages are: the stateless operations, the uniform
 access interface and the definition of a well layered system.
\end_layout

\begin_layout Standard
All the request will be served over the HTTPS protocol in order to guarantee
 the security the user is expecting.
\end_layout

\begin_layout Paragraph
Three Tier Client-Server
\end_layout

\begin_layout Standard
The Three Tier Architecture is a client-server approach where presentation,
 business logic and data are divided.
\end_layout

\begin_layout Standard
Its key feature is the possibility to divide the data from the logical computati
on and the user representation, so that different security measures can
 be implemented to improve the privacy of the user informations.
\end_layout

\begin_layout Standard
The complexity of the system has also decreased thanks to the adoption of
 the three tier approach.
 It force the developers to work in silos where components have dedicated
 defined needs and possibilities and can be upgraded seamlessly.
\end_layout

\begin_layout Paragraph
RDBMS
\end_layout

\begin_layout Standard
In order to easily manage the users data, with fast and easy-to-implement
 complex statistical queries, the use of a RDBMS was desirable.
\end_layout

\begin_layout Standard
MariaDB has been choosen because it is open source, widely used and uses
 the SQL standard language.
\end_layout

\begin_layout Paragraph
Thin Client
\end_layout

\begin_layout Standard
To create a fast application on both new and old devices, with fast or slow
 internet connection, has been decided to adopt a so called 'Thin Client'
 approach.
\end_layout

\begin_layout Standard
This approach makes the User Interface faster on old devices and can be
 acceptable for slow connections to, making the User eXperience enjoyable.
\end_layout

\begin_layout Standard
The client is developed to work only as an input/output for all the comunication
s to the server, where the business logic is deployed.
\end_layout

\begin_layout Paragraph
Model View Controller
\end_layout

\begin_layout Standard
The MVC approach has been choosen, for the Applications, to ensure division
 of objective for each part of the code.
\end_layout

\begin_layout Standard
The Model is the component that interacts with the server and retrives the
 Data through the RESTful APIs.
\end_layout

\begin_layout Standard
The View shows the data from the Model to the user, through their devices
 with the Mobile or the Web Application.
\end_layout

\begin_layout Standard
The Control is responsible for handling the user interactions through the
 View and works to modify the state of both the Model and the View itself.
\end_layout

\begin_layout Paragraph
Cross Platform
\end_layout

\begin_layout Standard
Developing Mobile Application means creating apps both for iOS and Android.
 Dedicated applications for each platforms brings to doubling timing, prices
 and having different design and experiences on the different platformsfor
 the development.
\end_layout

\begin_layout Standard
The adoption of a Cross Platform approach can overcome these obstacles by
 giving a flexible solution that can be run flawlessly on both platforms
 leaving us with just a few disadvantages.
\end_layout

\begin_layout Standard
The highest disadvantage is usually the presence of a different runtime
 environment such in case of using the Cordova or the Ionic framework.
 The adoption of the Xamarin Framework on the other hand doesn't bring this
 problematic.
\end_layout

\begin_layout Section
Other design decisions
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
User interface design
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Requirements traceability
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Implementation, integration and test plan
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Effort spent
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_body
\end_document
